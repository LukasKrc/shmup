/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 27 13:42:41 GMT 2016
 */

package lt.Shmup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import lt.Shmup.Container;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Container_ESTest extends Container_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      Container.register(class0, class1);
      String string0 = (String)Container.get(class0, true, true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Container.register(class0, class0);
      Object object0 = Container.get(class0, false);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Container.register(class0, class0);
      // Undeclared exception!
      try { 
        Container.get(class0, true);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Container.register(class0, class0);
      // Undeclared exception!
      try { 
        Container.get(class0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Container.register(class0, class0);
      Object object0 = Container.get(class0);
      Object object1 = Container.get(class0);
      assertSame(object1, object0);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        Container.get(class0, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Implementation for class java.lang.String is not configured.
         //
         assertThrownBy("lt.Shmup.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Container.register(class0, class0);
      // Undeclared exception!
      try { 
        Container.get(class0, false, false);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Container.get(class0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Implementation for class java.lang.Object is not configured.
         //
         assertThrownBy("lt.Shmup.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        Container.get(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Implementation for class java.lang.Object is not configured.
         //
         assertThrownBy("lt.Shmup.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Container.register(class0, class0);
      Object object0 = Container.get(class0, false, true);
      Object object1 = Container.get(class0);
      assertNotNull(object1);
      assertSame(object1, object0);
  }
}
