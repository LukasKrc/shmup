/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 27 13:35:37 GMT 2016
 */

package lt.Shmup.Main.GameObject.Components.State.Volumes;

import org.junit.Test;
import static org.junit.Assert.*;
import lt.Shmup.Main.GameObject.Components.State.Volumes.BasicVolume;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicVolume_ESTest extends BasicVolume_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BasicVolume basicVolume0 = new BasicVolume(1099.7891F, 1099.7891F);
      float float0 = basicVolume0.getWidth();
      assertEquals(1099.7891F, float0, 0.01F);
      assertEquals(1099.7891F, basicVolume0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicVolume basicVolume0 = new BasicVolume((-2008.35F), (-2008.35F));
      float float0 = basicVolume0.getWidth();
      assertEquals((-2008.35F), float0, 0.01F);
      assertEquals((-2008.35F), basicVolume0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicVolume basicVolume0 = new BasicVolume(1099.7891F, 1099.7891F);
      float float0 = basicVolume0.getHeight();
      assertEquals(1099.7891F, basicVolume0.getWidth(), 0.01F);
      assertEquals(1099.7891F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicVolume basicVolume0 = new BasicVolume(1094.83F, (-2114.7F));
      float float0 = basicVolume0.getHeight();
      assertEquals(1094.83F, basicVolume0.getWidth(), 0.01F);
      assertEquals((-2114.7F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BasicVolume basicVolume0 = new BasicVolume(1099.7891F, 1099.7891F);
      BasicVolume basicVolume1 = (BasicVolume)basicVolume0.clone();
      assertEquals(1099.7891F, basicVolume0.getHeight(), 0.01F);
      assertEquals(1099.7891F, basicVolume1.getWidth(), 0.01F);
      assertEquals(1099.7891F, basicVolume1.getHeight(), 0.01F);
      assertEquals(1099.7891F, basicVolume0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BasicVolume basicVolume0 = new BasicVolume((-379.45F), (-379.45F));
      BasicVolume basicVolume1 = (BasicVolume)basicVolume0.clone();
      assertEquals((-379.45F), basicVolume1.getHeight(), 0.01F);
      assertEquals((-379.45F), basicVolume0.getWidth(), 0.01F);
      assertEquals((-379.45F), basicVolume1.getWidth(), 0.01F);
      assertEquals((-379.45F), basicVolume0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicVolume basicVolume0 = new BasicVolume(0.0F, 0.0F);
      float float0 = basicVolume0.getHeight();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BasicVolume basicVolume0 = new BasicVolume(0.0F, 0.0F);
      BasicVolume basicVolume1 = (BasicVolume)basicVolume0.clone();
      assertNotSame(basicVolume1, basicVolume0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BasicVolume basicVolume0 = new BasicVolume(0.0F, 0.0F);
      float float0 = basicVolume0.getWidth();
      assertEquals(0.0F, float0, 0.01F);
  }
}
