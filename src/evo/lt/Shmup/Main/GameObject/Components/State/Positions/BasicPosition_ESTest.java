/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 27 14:06:35 GMT 2016
 */

package lt.Shmup.Main.GameObject.Components.State.Positions;

import org.junit.Test;
import static org.junit.Assert.*;
import lt.Shmup.Main.GameObject.Components.State.Positions.BasicPosition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicPosition_ESTest extends BasicPosition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition(1266.1196F, 1266.1196F);
      float float0 = basicPosition0.getY();
      assertEquals(1266.1196F, basicPosition0.getX(), 0.01F);
      assertEquals(1266.1196F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition((-1.0F), (-1.0F));
      float float0 = basicPosition0.getY();
      assertEquals((-1.0F), basicPosition0.getX(), 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition(2446.0F, 2446.0F);
      float float0 = basicPosition0.getX();
      assertEquals(2446.0F, basicPosition0.getY(), 0.01F);
      assertEquals(2446.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition((-934.5592F), (-934.5592F));
      float float0 = basicPosition0.getX();
      assertEquals((-934.5592F), basicPosition0.getY(), 0.01F);
      assertEquals((-934.5592F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition(2446.0F, 2446.0F);
      BasicPosition basicPosition1 = (BasicPosition)basicPosition0.clone();
      assertEquals(2446.0F, basicPosition0.getX(), 0.01F);
      assertEquals(2446.0F, basicPosition0.getY(), 0.01F);
      assertEquals(2446.0F, basicPosition1.getY(), 0.01F);
      assertEquals(2446.0F, basicPosition1.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition((-2578.96F), (-2578.96F));
      BasicPosition basicPosition1 = (BasicPosition)basicPosition0.clone();
      assertEquals((-2578.96F), basicPosition0.getY(), 0.01F);
      assertEquals((-2578.96F), basicPosition0.getX(), 0.01F);
      assertEquals((-2578.96F), basicPosition1.getX(), 0.01F);
      assertEquals((-2578.96F), basicPosition1.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition(1266.1196F, 1266.1196F);
      assertEquals(1266.1196F, basicPosition0.getX(), 0.01F);
      
      basicPosition0.setX(0.0F);
      BasicPosition basicPosition1 = (BasicPosition)basicPosition0.clone();
      assertEquals(1266.1196F, basicPosition1.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition(0.0F, 0.0F);
      basicPosition0.setY(0.0F);
      assertEquals(0.0F, basicPosition0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition(0.0F, 0.0F);
      BasicPosition basicPosition1 = (BasicPosition)basicPosition0.clone();
      assertFalse(basicPosition1.equals((Object)basicPosition0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition(0.0F, 0.0F);
      float float0 = basicPosition0.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicPosition basicPosition0 = new BasicPosition(0.0F, 0.0F);
      float float0 = basicPosition0.getX();
      assertEquals(0.0F, float0, 0.01F);
  }
}
