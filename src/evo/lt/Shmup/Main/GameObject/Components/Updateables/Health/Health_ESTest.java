/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 27 14:16:38 GMT 2016
 */

package lt.Shmup.Main.GameObject.Components.Updateables.Health;

import org.junit.Test;
import static org.junit.Assert.*;
import lt.Shmup.Main.GameObject.Components.Updateables.Health.Healths.DeathHealth;
import lt.Shmup.Main.GameObject.Components.Updateables.Health.Healths.NullHealth;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Health_ESTest extends Health_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NullHealth nullHealth0 = new NullHealth();
      int int0 = nullHealth0.getMinimumHealth();
      assertEquals(0, int0);
      assertEquals(0, nullHealth0.getMaximumHealth());
      assertEquals(0, nullHealth0.getHealth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeathHealth deathHealth0 = new DeathHealth(2965, 2965, 2965);
      int int0 = deathHealth0.getMinimumHealth();
      assertEquals(2965, deathHealth0.getHealth());
      assertEquals(2965, int0);
      assertEquals(2965, deathHealth0.getMaximumHealth());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NullHealth nullHealth0 = new NullHealth();
      int int0 = nullHealth0.getMaximumHealth();
      assertEquals(0, nullHealth0.getMinimumHealth());
      assertEquals(0, int0);
      assertEquals(0, nullHealth0.getHealth());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeathHealth deathHealth0 = new DeathHealth(502, 1174, (-528));
      int int0 = deathHealth0.getMaximumHealth();
      assertEquals(-528, deathHealth0.getHealth());
      assertEquals(502, deathHealth0.getMinimumHealth());
      assertEquals(1174, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NullHealth nullHealth0 = new NullHealth();
      int int0 = nullHealth0.getHealth();
      assertEquals(0, int0);
      assertEquals(0, nullHealth0.getMaximumHealth());
      assertEquals(0, nullHealth0.getMinimumHealth());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeathHealth deathHealth0 = new DeathHealth(0, 397, 2);
      int int0 = deathHealth0.getHealth();
      assertEquals(2, int0);
      assertEquals(0, deathHealth0.getMinimumHealth());
      assertEquals(397, deathHealth0.getMaximumHealth());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NullHealth nullHealth0 = new NullHealth();
      NullHealth nullHealth1 = (NullHealth)nullHealth0.clone();
      assertEquals(0, nullHealth1.getMinimumHealth());
      assertEquals(0, nullHealth1.getHealth());
      assertEquals(0, nullHealth1.getMaximumHealth());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeathHealth deathHealth0 = new DeathHealth(29, 29, 29);
      deathHealth0.clone();
      assertEquals(29, deathHealth0.getHealth());
      assertEquals(29, deathHealth0.getMinimumHealth());
      assertEquals(29, deathHealth0.getMaximumHealth());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeathHealth deathHealth0 = new DeathHealth((-560), (-560), (-560));
      deathHealth0.clone();
      assertEquals(-560, deathHealth0.getHealth());
      assertEquals(-560, deathHealth0.getMinimumHealth());
      assertEquals(-560, deathHealth0.getMaximumHealth());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeathHealth deathHealth0 = new DeathHealth((-560), (-560), (-560));
      int int0 = deathHealth0.getHealth();
      assertEquals(-560, deathHealth0.getMaximumHealth());
      assertEquals((-560), int0);
      assertEquals(-560, deathHealth0.getMinimumHealth());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeathHealth deathHealth0 = new DeathHealth((-560), (-560), (-560));
      int int0 = deathHealth0.getMaximumHealth();
      assertEquals((-560), int0);
      assertEquals(-560, deathHealth0.getMinimumHealth());
      assertEquals(-560, deathHealth0.getHealth());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeathHealth deathHealth0 = new DeathHealth((-560), (-560), (-560));
      int int0 = deathHealth0.getMinimumHealth();
      assertEquals((-560), int0);
      assertEquals(-560, deathHealth0.getMaximumHealth());
      assertEquals(-560, deathHealth0.getHealth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeathHealth deathHealth0 = new DeathHealth(502, 1174, (-528));
      deathHealth0.setHealth(0);
      assertEquals(0, deathHealth0.getHealth());
  }
}
