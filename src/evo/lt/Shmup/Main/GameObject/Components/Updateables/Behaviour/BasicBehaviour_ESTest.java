/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 27 13:44:56 GMT 2016
 */

package lt.Shmup.Main.GameObject.Components.Updateables.Behaviour;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import lt.Shmup.Main.GameObject.Components.Updateables.Behaviour.BasicBehaviour;
import lt.Shmup.Main.GameObject.Objects.Entity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicBehaviour_ESTest extends BasicBehaviour_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BasicBehaviour basicBehaviour0 = new BasicBehaviour((Random) mockRandom0);
      // Undeclared exception!
      try { 
        basicBehaviour0.update((Entity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("lt.Shmup.Main.GameObject.Components.Updateables.Behaviour.BasicBehaviour", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BasicBehaviour basicBehaviour0 = null;
      try {
        basicBehaviour0 = new BasicBehaviour((Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("lt.Shmup.Main.GameObject.Components.Updateables.Behaviour.BasicBehaviour", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BasicBehaviour basicBehaviour0 = new BasicBehaviour((Random) mockRandom0);
      BasicBehaviour basicBehaviour1 = (BasicBehaviour)basicBehaviour0.clone();
      assertNotSame(basicBehaviour1, basicBehaviour0);
  }
}
